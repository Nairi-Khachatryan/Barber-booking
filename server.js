require('dotenv').config();

const TelegramBot = require('node-telegram-bot-api');
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

const { saveAppointment, cancelAppointment } = require('./db');
const { buttonText, listTimeButtons } = require('./buttons');
const CHANNEL_ID = process.env.CHANNEL_ID;

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const options = {
    reply_markup: {
      inline_keyboard: Object.keys(buttonText).map((key) => [
        { text: buttonText[key], callback_data: key },
      ]),
    },
  };
  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É: ‚úÖ ', options);
});

bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const userName =
    query.from.first_name || query.from.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

  if (query.data === 'watch') {
    const options = {
      reply_markup: {
        inline_keyboard: Object.keys(listTimeButtons).map((key) => [
          { text: listTimeButtons[key], callback_data: key },
        ]),
      },
    };
    return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è: ‚è∞ ', options);
  }

  if (query.data === 'cancel') {
    return await cancelAppointment(chatId, bot);
  }

  if (listTimeButtons[query.data]) {
    const selectedTime = listTimeButtons[query.data];

    const result = await saveAppointment(chatId, userName, selectedTime, bot);
    if (result) {
      console.log('result', result)
      await bot.sendMessage(
        CHANNEL_ID,
        `üßë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userName} ‚è∞  –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞: ${selectedTime} ‚úÖ  `

      );
      console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${userName} - ${selectedTime}`);
    }
  }

  bot.answerCallbackQuery(query.id, { text: '–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É! ‚úÖ  ' });
});
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');
